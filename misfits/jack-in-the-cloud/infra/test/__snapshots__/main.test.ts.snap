// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Snapshot 1`] = `
{
  "Mappings": {
    "ServiceprincipalMap": {
      "af-south-1": {
        "states": "states.af-south-1.amazonaws.com",
      },
      "ap-east-1": {
        "states": "states.ap-east-1.amazonaws.com",
      },
      "ap-northeast-1": {
        "states": "states.ap-northeast-1.amazonaws.com",
      },
      "ap-northeast-2": {
        "states": "states.ap-northeast-2.amazonaws.com",
      },
      "ap-northeast-3": {
        "states": "states.ap-northeast-3.amazonaws.com",
      },
      "ap-south-1": {
        "states": "states.ap-south-1.amazonaws.com",
      },
      "ap-south-2": {
        "states": "states.ap-south-2.amazonaws.com",
      },
      "ap-southeast-1": {
        "states": "states.ap-southeast-1.amazonaws.com",
      },
      "ap-southeast-2": {
        "states": "states.ap-southeast-2.amazonaws.com",
      },
      "ap-southeast-3": {
        "states": "states.ap-southeast-3.amazonaws.com",
      },
      "ap-southeast-4": {
        "states": "states.ap-southeast-4.amazonaws.com",
      },
      "ca-central-1": {
        "states": "states.ca-central-1.amazonaws.com",
      },
      "cn-north-1": {
        "states": "states.cn-north-1.amazonaws.com",
      },
      "cn-northwest-1": {
        "states": "states.cn-northwest-1.amazonaws.com",
      },
      "eu-central-1": {
        "states": "states.eu-central-1.amazonaws.com",
      },
      "eu-central-2": {
        "states": "states.eu-central-2.amazonaws.com",
      },
      "eu-north-1": {
        "states": "states.eu-north-1.amazonaws.com",
      },
      "eu-south-1": {
        "states": "states.eu-south-1.amazonaws.com",
      },
      "eu-south-2": {
        "states": "states.eu-south-2.amazonaws.com",
      },
      "eu-west-1": {
        "states": "states.eu-west-1.amazonaws.com",
      },
      "eu-west-2": {
        "states": "states.eu-west-2.amazonaws.com",
      },
      "eu-west-3": {
        "states": "states.eu-west-3.amazonaws.com",
      },
      "il-central-1": {
        "states": "states.il-central-1.amazonaws.com",
      },
      "me-central-1": {
        "states": "states.me-central-1.amazonaws.com",
      },
      "me-south-1": {
        "states": "states.me-south-1.amazonaws.com",
      },
      "sa-east-1": {
        "states": "states.sa-east-1.amazonaws.com",
      },
      "us-east-1": {
        "states": "states.us-east-1.amazonaws.com",
      },
      "us-east-2": {
        "states": "states.us-east-2.amazonaws.com",
      },
      "us-gov-east-1": {
        "states": "states.us-gov-east-1.amazonaws.com",
      },
      "us-gov-west-1": {
        "states": "states.us-gov-west-1.amazonaws.com",
      },
      "us-iso-east-1": {
        "states": "states.amazonaws.com",
      },
      "us-iso-west-1": {
        "states": "states.amazonaws.com",
      },
      "us-isob-east-1": {
        "states": "states.amazonaws.com",
      },
      "us-west-1": {
        "states": "states.us-west-1.amazonaws.com",
      },
      "us-west-2": {
        "states": "states.us-west-2.amazonaws.com",
      },
    },
  },
  "Outputs": {
    "Exporttestmachinearn": {
      "Export": {
        "Name": "test-machine-arn",
      },
      "Value": {
        "Ref": "JackOfTheCloudMachineStateMachineC6DCCDE1",
      },
    },
    "Exporttesttopicarn": {
      "Export": {
        "Name": "test-topic-arn",
      },
      "Value": {
        "Ref": "TopicBFC7AF6E",
      },
    },
    "JackOfTheCloudApiEndpoint39E7A8E6": {
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "JackOfTheCloudApi14367AC9",
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region",
            },
            ".",
            {
              "Ref": "AWS::URLSuffix",
            },
            "/",
            {
              "Ref": "JackOfTheCloudApiDeploymentStageprod95726768",
            },
            "/",
          ],
        ],
      },
    },
  },
  "Parameters": {
    "BootstrapVersion": {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
  },
  "Resources": {
    "JackOfTheCloudApi14367AC9": {
      "DependsOn": [
        "JackOfTheCloudApiPrepareSpecCustomResource8345BEC3",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "BodyS3Location": {
          "Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "Key": {
            "Fn::GetAtt": [
              "JackOfTheCloudApiPrepareSpecCustomResource8345BEC3",
              "outputSpecKey",
            ],
          },
        },
        "Name": "JackOfTheCloudApi",
        "Policy": {
          "Statement": [
            {
              "Action": "execute-api:Invoke",
              "Effect": "Allow",
              "Principal": {
                "AWS": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition",
                      },
                      ":iam::",
                      {
                        "Ref": "AWS::AccountId",
                      },
                      ":root",
                    ],
                  ],
                },
              },
              "Resource": "execute-api:/*",
            },
            {
              "Action": "execute-api:Invoke",
              "Effect": "Allow",
              "Principal": {
                "AWS": "*",
              },
              "Resource": "execute-api:/*/OPTIONS/*",
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::ApiGateway::RestApi",
    },
    "JackOfTheCloudApiAccessLogsFA1F6052": {
      "DeletionPolicy": "Retain",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "RetentionInDays": 731,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "JackOfTheCloudApiAccount491E0E0F": {
      "DeletionPolicy": "Retain",
      "DependsOn": [
        "JackOfTheCloudApi14367AC9",
        "JackOfTheCloudApiPrepareSpecCustomResource8345BEC3",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "CloudWatchRoleArn": {
          "Fn::GetAtt": [
            "JackOfTheCloudApiCloudWatchRoleB77594C7",
            "Arn",
          ],
        },
      },
      "Type": "AWS::ApiGateway::Account",
      "UpdateReplacePolicy": "Retain",
    },
    "JackOfTheCloudApiCancelTimerA411A5BD": {
      "DependsOn": [
        "JackOfTheCloudApiCancelTimerServiceRoleDefaultPolicy20BDAF85",
        "JackOfTheCloudApiCancelTimerServiceRole07B2DD79",
      ],
      "Properties": {
        "Architectures": [
          "arm64",
        ],
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "3a5965bbcc4d1687bce0b44526ab1523304a3245de10c313bedd5d060465ffa3.zip",
        },
        "Environment": {
          "Variables": {
            "MACHINE_ARN": {
              "Ref": "JackOfTheCloudMachineStateMachineC6DCCDE1",
            },
            "TABLE_NAME": {
              "Ref": "JackOfTheCloudTableE206ED70",
            },
          },
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "JackOfTheCloudApiCancelTimerServiceRole07B2DD79",
            "Arn",
          ],
        },
        "Runtime": "nodejs20.x",
        "Timeout": 30,
        "TracingConfig": {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "JackOfTheCloudApiCancelTimerServiceRole07B2DD79": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "JackOfTheCloudApiCancelTimerServiceRoleDefaultPolicy20BDAF85": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
                "dynamodb:DescribeTable",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "JackOfTheCloudTableE206ED70",
                    "Arn",
                  ],
                },
                {
                  "Ref": "AWS::NoValue",
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "JackOfTheCloudApiCancelTimerServiceRoleDefaultPolicy20BDAF85",
        "Roles": [
          {
            "Ref": "JackOfTheCloudApiCancelTimerServiceRole07B2DD79",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "JackOfTheCloudApiCloudWatchRoleB77594C7": {
      "DeletionPolicy": "Retain",
      "DependsOn": [
        "JackOfTheCloudApiPrepareSpecCustomResource8345BEC3",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "apigateway.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
      "UpdateReplacePolicy": "Retain",
    },
    "JackOfTheCloudApiCreateTimer986B2E32": {
      "DependsOn": [
        "JackOfTheCloudApiCreateTimerServiceRoleDefaultPolicy235111FE",
        "JackOfTheCloudApiCreateTimerServiceRole45980278",
      ],
      "Properties": {
        "Architectures": [
          "arm64",
        ],
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "5417e1584b51e23bcb878b09ba2fd9eeb25528f902452f300a636d1272f25fd3.zip",
        },
        "Environment": {
          "Variables": {
            "MACHINE_ARN": {
              "Ref": "JackOfTheCloudMachineStateMachineC6DCCDE1",
            },
            "TABLE_NAME": {
              "Ref": "JackOfTheCloudTableE206ED70",
            },
          },
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "JackOfTheCloudApiCreateTimerServiceRole45980278",
            "Arn",
          ],
        },
        "Runtime": "nodejs20.x",
        "Timeout": 30,
        "TracingConfig": {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "JackOfTheCloudApiCreateTimerServiceRole45980278": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "JackOfTheCloudApiCreateTimerServiceRoleDefaultPolicy235111FE": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
                "dynamodb:DescribeTable",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "JackOfTheCloudTableE206ED70",
                    "Arn",
                  ],
                },
                {
                  "Ref": "AWS::NoValue",
                },
              ],
            },
            {
              "Action": "states:StartExecution",
              "Effect": "Allow",
              "Resource": {
                "Ref": "JackOfTheCloudMachineStateMachineC6DCCDE1",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "JackOfTheCloudApiCreateTimerServiceRoleDefaultPolicy235111FE",
        "Roles": [
          {
            "Ref": "JackOfTheCloudApiCreateTimerServiceRole45980278",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "JackOfTheCloudApiDeploymentA136B1033655c5f8482c30686a24b3720415d6d4": {
      "DependsOn": [
        "JackOfTheCloudApiPrepareSpecCustomResource8345BEC3",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Description": "Automatically created by the RestApi construct",
        "RestApiId": {
          "Ref": "JackOfTheCloudApi14367AC9",
        },
      },
      "Type": "AWS::ApiGateway::Deployment",
    },
    "JackOfTheCloudApiDeploymentStageprod95726768": {
      "DependsOn": [
        "JackOfTheCloudApiAccount491E0E0F",
        "JackOfTheCloudApiPrepareSpecCustomResource8345BEC3",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "AccessLogSetting": {
          "DestinationArn": {
            "Fn::GetAtt": [
              "JackOfTheCloudApiAccessLogsFA1F6052",
              "Arn",
            ],
          },
          "Format": "$context.identity.sourceIp $context.identity.caller $context.identity.user [$context.requestTime] "$context.httpMethod $context.resourcePath $context.protocol" $context.status $context.responseLength $context.requestId",
        },
        "DeploymentId": {
          "Ref": "JackOfTheCloudApiDeploymentA136B1033655c5f8482c30686a24b3720415d6d4",
        },
        "MethodSettings": [
          {
            "DataTraceEnabled": false,
            "HttpMethod": "*",
            "LoggingLevel": "INFO",
            "ResourcePath": "/*",
          },
        ],
        "RestApiId": {
          "Ref": "JackOfTheCloudApi14367AC9",
        },
        "StageName": "prod",
      },
      "Type": "AWS::ApiGateway::Stage",
    },
    "JackOfTheCloudApiLambdaPermissioncancelTimerEA52169D": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "JackOfTheCloudApiCancelTimerA411A5BD",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "JackOfTheCloudApi14367AC9",
              },
              "/*/POST/cancel-timer",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "JackOfTheCloudApiLambdaPermissioncreateTimer7E57CD36": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "JackOfTheCloudApiCreateTimer986B2E32",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "JackOfTheCloudApi14367AC9",
              },
              "/*/POST/create-timer",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "JackOfTheCloudApiLambdaPermissionupdateTimer1C7EBF9E": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "JackOfTheCloudApiUpdateTimer1056CC44",
            "Arn",
          ],
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":",
              {
                "Ref": "JackOfTheCloudApi14367AC9",
              },
              "/*/POST/update-timer",
            ],
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "JackOfTheCloudApiPrepareSpecCustomResource8345BEC3": {
      "DeletionPolicy": "Delete",
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "JackOfTheCloudApiPrepareSpecProviderframeworkonEvent6C09720F",
            "Arn",
          ],
        },
        "corsOptions": {
          "allowHeaders": [
            "Content-Type",
            "X-Amz-Date",
            "Authorization",
            "X-Api-Key",
            "X-Amz-Security-Token",
            "X-Amz-User-Agent",
            "x-amz-content-sha256",
          ],
          "allowMethods": [
            "OPTIONS",
            "GET",
            "PUT",
            "POST",
            "DELETE",
            "PATCH",
            "HEAD",
          ],
          "allowOrigins": [
            "*",
          ],
          "statusCode": 204,
        },
        "defaultAuthorizerReference": {
          "authorizerId": "aws.auth.sigv4",
        },
        "inputSpecLocation": {
          "bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "key": "9739e1961270260ce066bc5075416835209d80554348e46b42f0483956209e8d.json",
        },
        "integrations": {
          "cancelTimer": {
            "integration": {
              "httpMethod": "POST",
              "passthroughBehavior": "WHEN_NO_MATCH",
              "type": "AWS_PROXY",
              "uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "JackOfTheCloudApiCancelTimerA411A5BD",
                        "Arn",
                      ],
                    },
                    "/invocations",
                  ],
                ],
              },
            },
          },
          "createTimer": {
            "integration": {
              "httpMethod": "POST",
              "passthroughBehavior": "WHEN_NO_MATCH",
              "type": "AWS_PROXY",
              "uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "JackOfTheCloudApiCreateTimer986B2E32",
                        "Arn",
                      ],
                    },
                    "/invocations",
                  ],
                ],
              },
            },
          },
          "updateTimer": {
            "integration": {
              "httpMethod": "POST",
              "passthroughBehavior": "WHEN_NO_MATCH",
              "type": "AWS_PROXY",
              "uri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "JackOfTheCloudApiUpdateTimer1056CC44",
                        "Arn",
                      ],
                    },
                    "/invocations",
                  ],
                ],
              },
            },
          },
        },
        "operationLookup": {
          "cancelTimer": {
            "contentTypes": [
              "application/json",
            ],
            "method": "POST",
            "path": "/cancel-timer",
          },
          "createTimer": {
            "contentTypes": [
              "application/json",
            ],
            "method": "POST",
            "path": "/create-timer",
          },
          "updateTimer": {
            "contentTypes": [
              "application/json",
            ],
            "method": "POST",
            "path": "/update-timer",
          },
        },
        "outputSpecLocation": {
          "bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "key": "9739e1961270260ce066bc5075416835209d80554348e46b42f0483956209e8d.json-prepared",
        },
        "securitySchemes": {
          "aws.auth.sigv4": {
            "in": "header",
            "name": "Authorization",
            "type": "apiKey",
            "x-amazon-apigateway-authtype": "awsSigv4",
          },
        },
      },
      "Type": "AWS::CloudFormation::CustomResource",
      "UpdateReplacePolicy": "Delete",
    },
    "JackOfTheCloudApiPrepareSpecHandler148DAAE5": {
      "DependsOn": [
        "JackOfTheCloudApiPrepareSpecRole8D76E6ED",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "ba12dcde6c81683acb464c36ad9b89d05fcd1e69a429ac6f69e123052d4d5b6d.zip",
        },
        "FunctionName": "test-787DB00DPrepSpec",
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "JackOfTheCloudApiPrepareSpecRole8D76E6ED",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
        "Timeout": 30,
      },
      "Type": "AWS::Lambda::Function",
    },
    "JackOfTheCloudApiPrepareSpecProviderRole11B271FA": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM5",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:logs:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":log-group:/aws/lambda/test-787DB00DPrepSpecProvider",
                        ],
                      ],
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:logs:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":log-group:/aws/lambda/test-787DB00DPrepSpecProvider:*",
                        ],
                      ],
                    },
                  ],
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "logs",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "JackOfTheCloudApiPrepareSpecProviderRoleDefaultPolicy43E3A274": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-IAM5",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "JackOfTheCloudApiPrepareSpecHandler148DAAE5",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "JackOfTheCloudApiPrepareSpecHandler148DAAE5",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "JackOfTheCloudApiPrepareSpecProviderRoleDefaultPolicy43E3A274",
        "Roles": [
          {
            "Ref": "JackOfTheCloudApiPrepareSpecProviderRole11B271FA",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "JackOfTheCloudApiPrepareSpecProviderframeworkonEvent6C09720F": {
      "DependsOn": [
        "JackOfTheCloudApiPrepareSpecProviderRoleDefaultPolicy43E3A274",
        "JackOfTheCloudApiPrepareSpecProviderRole11B271FA",
      ],
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "id": "AwsSolutions-L1",
              "reason": "Latest runtime cannot be configured. CDK will need to upgrade the Provider construct accordingly.",
            },
            {
              "id": "AwsPrototyping-LambdaLatestVersion",
              "reason": "Latest runtime cannot be configured. CDK will need to upgrade the Provider construct accordingly.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "3542be390685e0c8353d92ccb5796d343cd93ca946b6b0de798004206a199adc.zip",
        },
        "Description": "AWS CDK resource provider framework - onEvent (test/JackOfTheCloudApi/JackOfTheCloudApi/PrepareSpecProvider)",
        "Environment": {
          "Variables": {
            "USER_ON_EVENT_FUNCTION_ARN": {
              "Fn::GetAtt": [
                "JackOfTheCloudApiPrepareSpecHandler148DAAE5",
                "Arn",
              ],
            },
          },
        },
        "FunctionName": "test-787DB00DPrepSpecProvider",
        "Handler": "framework.onEvent",
        "Role": {
          "Fn::GetAtt": [
            "JackOfTheCloudApiPrepareSpecProviderRole11B271FA",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "JackOfTheCloudApiPrepareSpecRole8D76E6ED": {
      "Metadata": {
        "cdk_nag": {
          "rules_to_suppress": [
            {
              "applies_to": [
                {
                  "regex": "/^Resource::arn:aws:logs:<AWS::Region>:<AWS::AccountId>:log-group:/aws/lambda/test-787DB00DPrepSpec:*/g",
                },
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Resource::arn:<AWS::Partition>:s3:.*/9739e1961270260ce066bc5075416835209d80554348e46b42f0483956209e8d.json-prepared/*/g",
                },
              ],
              "id": "AwsSolutions-IAM5",
              "reason": "S3 resources have been scoped down to the appropriate prefix in the CDK asset bucket, however * is still needed as since the prepared spec hash is not known until deploy time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Resource::arn:aws:logs:<AWS::Region>:<AWS::AccountId>:log-group:/aws/lambda/test-787DB00DPrepSpec:*/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "Cloudwatch resources have been scoped down to the LogGroup level, however * is still needed as stream names are created just in time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Resource::arn:<AWS::Partition>:s3:.*/9739e1961270260ce066bc5075416835209d80554348e46b42f0483956209e8d.json-prepared/*/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoWildcardPermissions",
              "reason": "S3 resources have been scoped down to the appropriate prefix in the CDK asset bucket, however * is still needed as since the prepared spec hash is not known until deploy time.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsSolutions-IAM4",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "applies_to": [
                {
                  "regex": "/^Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs$/g",
                },
              ],
              "id": "AwsPrototyping-IAMNoManagedPolicies",
              "reason": "Cloudwatch Role requires access to create/read groups at the root level.",
            },
            {
              "id": "AwsSolutions-APIG2",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
            {
              "id": "AwsPrototyping-APIGWRequestValidation",
              "reason": "This construct implements fine grained validation via OpenApi.",
            },
          ],
        },
      },
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:logs:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":log-group:/aws/lambda/test-787DB00DPrepSpec",
                        ],
                      ],
                    },
                    {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:logs:",
                          {
                            "Ref": "AWS::Region",
                          },
                          ":",
                          {
                            "Ref": "AWS::AccountId",
                          },
                          ":log-group:/aws/lambda/test-787DB00DPrepSpec:*",
                        ],
                      ],
                    },
                  ],
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "logs",
          },
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": "s3:getObject",
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":s3:::",
                        {
                          "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
                        },
                        "/9739e1961270260ce066bc5075416835209d80554348e46b42f0483956209e8d.json",
                      ],
                    ],
                  },
                },
                {
                  "Action": "s3:putObject",
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":s3:::",
                        {
                          "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
                        },
                        "/9739e1961270260ce066bc5075416835209d80554348e46b42f0483956209e8d.json-prepared/*",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "s3",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "JackOfTheCloudApiUpdateTimer1056CC44": {
      "DependsOn": [
        "JackOfTheCloudApiUpdateTimerServiceRoleDefaultPolicy405D7B92",
        "JackOfTheCloudApiUpdateTimerServiceRole85434B54",
      ],
      "Properties": {
        "Architectures": [
          "arm64",
        ],
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "f17cbda7da2cd2bdd27fa66c387769ae5d872bbc1e529618f66fee67e9dabfe3.zip",
        },
        "Environment": {
          "Variables": {
            "MACHINE_ARN": {
              "Ref": "JackOfTheCloudMachineStateMachineC6DCCDE1",
            },
            "TABLE_NAME": {
              "Ref": "JackOfTheCloudTableE206ED70",
            },
          },
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "JackOfTheCloudApiUpdateTimerServiceRole85434B54",
            "Arn",
          ],
        },
        "Runtime": "nodejs20.x",
        "Timeout": 30,
        "TracingConfig": {
          "Mode": "Active",
        },
      },
      "Type": "AWS::Lambda::Function",
    },
    "JackOfTheCloudApiUpdateTimerServiceRole85434B54": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "JackOfTheCloudApiUpdateTimerServiceRoleDefaultPolicy405D7B92": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
                "dynamodb:DescribeTable",
              ],
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "JackOfTheCloudTableE206ED70",
                    "Arn",
                  ],
                },
                {
                  "Ref": "AWS::NoValue",
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "JackOfTheCloudApiUpdateTimerServiceRoleDefaultPolicy405D7B92",
        "Roles": [
          {
            "Ref": "JackOfTheCloudApiUpdateTimerServiceRole85434B54",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "JackOfTheCloudMachineStateMachineC6DCCDE1": {
      "DeletionPolicy": "Delete",
      "DependsOn": [
        "JackOfTheCloudMachineStateMachineRoleDefaultPolicyC41F4AE4",
        "JackOfTheCloudMachineStateMachineRoleF9FFBEB4",
      ],
      "Properties": {
        "DefinitionString": {
          "Fn::Join": [
            "",
            [
              "{"StartAt":"Wait","States":{"Wait":{"Type":"Wait","TimestampPath":"$.fireAt","Next":"SnsPublish"},"SnsPublish":{"End":true,"Type":"Task","Resource":"arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":states:::sns:publish","Parameters":{"TopicArn":"",
              {
                "Ref": "TopicBFC7AF6E",
              },
              "","Message.$":"$.payload","MessageAttributes":{"type":{"DataType":"String","StringValue.$":"$.type"}}}}}}",
            ],
          ],
        },
        "RoleArn": {
          "Fn::GetAtt": [
            "JackOfTheCloudMachineStateMachineRoleF9FFBEB4",
            "Arn",
          ],
        },
      },
      "Type": "AWS::StepFunctions::StateMachine",
      "UpdateReplacePolicy": "Delete",
    },
    "JackOfTheCloudMachineStateMachineRoleDefaultPolicyC41F4AE4": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "sns:Publish",
              "Effect": "Allow",
              "Resource": {
                "Ref": "TopicBFC7AF6E",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "JackOfTheCloudMachineStateMachineRoleDefaultPolicyC41F4AE4",
        "Roles": [
          {
            "Ref": "JackOfTheCloudMachineStateMachineRoleF9FFBEB4",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "JackOfTheCloudMachineStateMachineRoleF9FFBEB4": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": {
                  "Fn::FindInMap": [
                    "ServiceprincipalMap",
                    {
                      "Ref": "AWS::Region",
                    },
                    "states",
                  ],
                },
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "JackOfTheCloudTableE206ED70": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "id",
            "AttributeType": "S",
          },
        ],
        "BillingMode": "PAY_PER_REQUEST",
        "KeySchema": [
          {
            "AttributeName": "id",
            "KeyType": "HASH",
          },
        ],
        "TimeToLiveSpecification": {
          "AttributeName": "ttl",
          "Enabled": true,
        },
      },
      "Type": "AWS::DynamoDB::Table",
      "UpdateReplacePolicy": "Delete",
    },
    "TopicBFC7AF6E": {
      "Properties": {
        "KmsMasterKeyId": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":kms:",
              {
                "Ref": "AWS::Region",
              },
              ":",
              {
                "Ref": "AWS::AccountId",
              },
              ":alias/aws/sns",
            ],
          ],
        },
      },
      "Type": "AWS::SNS::Topic",
    },
  },
  "Rules": {
    "CheckBootstrapVersion": {
      "Assertions": [
        {
          "Assert": {
            "Fn::Not": [
              {
                "Fn::Contains": [
                  [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;
